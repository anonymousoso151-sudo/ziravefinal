import { NestFactory } from '@nestjs/core';
import { ConfigModule } from '@nestjs/config';
import { AppModule } from './app.module';
import { SupabaseService } from './supabase/supabase.service';

async function testDatabaseConnection() {
  console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...\n');

  try {
    // ุฅูุดุงุก ุชุทุจูู NestJS ูุณุชูู
    const app = await NestFactory.createApplicationContext(AppModule);
    
    console.log('โ ุชู ุฅูุดุงุก ุชุทุจูู NestJS ุจูุฌุงุญ');
    
    // ุงูุญุตูู ุนูู ุฎุฏูุฉ Supabase
    const supabaseService = app.get(SupabaseService);
    
    console.log('โ ุชู ุงูุญุตูู ุนูู ุฎุฏูุฉ Supabase ุจูุฌุงุญ');
    
    // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงูุฃุณุงุณู ุจุงุณุชุฎุฏุงู ุงูุนููู ุงูุนุงุฏู
    console.log('\n๐ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงูุฃุณุงุณู...');
    
    // ุงุฎุชุจุงุฑ ุจุณูุท ููุงุชุตุงู
    const { data: testData, error: testError } = await supabaseService.client
      .from('_test_connection')
      .select('*')
      .limit(1);
    
    if (testError && testError.code === 'PGRST205') {
      console.log('โ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ูุนูู (ุงูุฌุฏูู ุบูุฑ ููุฌูุฏ - ููุฐุง ุทุจูุนู)');
    } else if (testError) {
      console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู:', testError);
    } else {
      console.log('โ ุงูุงุชุตุงู ูุนูู ุจุดูู ูุซุงูู');
    }
    
    // ูุญุงููุฉ ุฌูุจ ูุนูููุงุช ุงูุฌุฏุงูู ุงููุชุงุญุฉ
    console.log('\n๐ ุฌูุจ ูุนูููุงุช ุงูุฌุฏุงูู ุงููุชุงุญุฉ...');
    
    try {
      const { data: tables, error: tablesError } = await supabaseService.client
        .rpc('get_tables_info');
      
      if (tablesError) {
        console.log('โน๏ธ ูุง ูููู ุฌูุจ ูุนูููุงุช ุงูุฌุฏุงูู ุนุจุฑ RPCุ ุฌุงุฑู ุงููุญุงููุฉ ุจุทุฑููุฉ ุฃุฎุฑู...');
        
        // ูุญุงููุฉ ุจุฏููุฉ - ุฌูุจ ูู ุฌุฏูู system
        const { data: systemTables, error: systemError } = await supabaseService.client
          .from('information_schema.tables')
          .select('table_name')
          .eq('table_schema', 'public');
        
        if (systemError) {
          console.log('โน๏ธ ูุง ูููู ุงููุตูู ุฅูู information_schema (ูุฏ ูููู ุจุณุจุจ RLS)');
        } else {
          console.log('๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
          systemTables?.forEach((table: any) => {
            console.log(`   - ${table.table_name}`);
          });
        }
      } else {
        console.log('๐ ุงูุฌุฏุงูู ุงููุชุงุญุฉ:', tables);
      }
    } catch (error) {
      console.log('โน๏ธ ูุง ูููู ุฌูุจ ูุนูููุงุช ุงูุฌุฏุงูู:', error);
    }
    
    // ุงุฎุชุจุงุฑ ุฌุฏูู profiles ุฅุฐุง ูุงู ููุฌูุฏุงู
    console.log('\n๐ ุงุฎุชุจุงุฑ ุฌุฏูู profiles...');
    
    try {
      const { data: profiles, error: profilesError } = await supabaseService.client
        .from('profiles')
        .select('*')
        .limit(1);
      
      if (profilesError) {
        if (profilesError.code === 'PGRST205') {
          console.log('โน๏ธ ุฌุฏูู profiles ุบูุฑ ููุฌูุฏ - ูุฌุจ ุฅูุดุงุคู ุฃููุงู');
          console.log('๐ก ููููู ุฅูุดุงุก ุงูุฌุฏูู ุจุงุณุชุฎุฏุงู Supabase CLI ุฃู ูู ููุญุฉ ุงูุชุญูู');
        } else {
          console.error('โ ุฎุทุฃ ูู ุงููุตูู ูุฌุฏูู profiles:', profilesError);
        }
      } else {
        console.log('โ ูุฌุญ ุงููุตูู ูุฌุฏูู profiles');
        console.log('๐ ุนุฏุฏ ุงููููุงุช ุงูุดุฎุตูุฉ:', profiles?.length || 0);
        
        if (profiles && profiles.length > 0) {
          console.log('๐ค ุฃูู ููู ุดุฎุตู:', JSON.stringify(profiles[0], null, 2));
        }
      }
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุฌุฏูู profiles:', error);
    }
    
    // ุงุฎุชุจุงุฑ ุงูุนููู ุงูุฅุฏุงุฑู (ุฅุฐุง ูุงู ููุชุงุญ Service Role ุตุญูุญ)
    console.log('\n๐ ุงุฎุชุจุงุฑ ุงูุนููู ุงูุฅุฏุงุฑู...');
    
    try {
      const { data: adminTest, error: adminError } = await supabaseService.admin
        .from('profiles')
        .select('*')
        .limit(1);
      
      if (adminError) {
        if (adminError.message?.includes('Invalid API key')) {
          console.log('โน๏ธ ููุชุงุญ Service Role ุบูุฑ ุตุญูุญ ุฃู ุบูุฑ ูุญุฏุฏ');
          console.log('๐ก ูุฌุจ ุชุญุฏูุซ SUPABASE_SERVICE_ROLE_KEY ูู ููู .env');
        } else {
          console.error('โ ุฎุทุฃ ูู ุงูุนููู ุงูุฅุฏุงุฑู:', adminError);
        }
      } else {
        console.log('โ ุงูุนููู ุงูุฅุฏุงุฑู ูุนูู ุจุดูู ุตุญูุญ');
        console.log('๐ ุนุฏุฏ ุงููููุงุช ุงูุดุฎุตูุฉ (ุฅุฏุงุฑู):', adminTest?.length || 0);
      }
    } catch (error) {
      console.error('โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุนููู ุงูุฅุฏุงุฑู:', error);
    }
    
    // ุงุฎุชุจุงุฑ ุฅุถุงูู - ูุญุงููุฉ ุฅูุดุงุก ุฌุฏูู ุชุฌุฑูุจู
    console.log('\n๐ ุงุฎุชุจุงุฑ ุฅูุดุงุก ุฌุฏูู ุชุฌุฑูุจู...');
    
    try {
      const { data: createResult, error: createError } = await supabaseService.client
        .rpc('create_test_table');
      
      if (createError) {
        console.log('โน๏ธ ูุง ูููู ุฅูุดุงุก ุฌุฏูู ุชุฌุฑูุจู (ูุฏ ูููู ุจุณุจุจ ุงูุตูุงุญูุงุช)');
      } else {
        console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู ุชุฌุฑูุจู ุจูุฌุงุญ');
      }
    } catch (error) {
      console.log('โน๏ธ ูุง ูููู ุฅูุดุงุก ุฌุฏูู ุชุฌุฑูุจู:', error);
    }
    
    // ุฅุบูุงู ุงูุชุทุจูู
    await app.close();
    
    console.log('\n๐ ุชู ุฅููุงู ุงุฎุชุจุงุฑ ุงูุงุชุตุงู!');
    console.log('\n๐ ููุฎุต ุงููุชุงุฆุฌ:');
    console.log('   โ ุงูุงุชุตุงู ุจู Supabase ูุนูู');
    console.log('   โน๏ธ ูุฏ ุชุญุชุงุฌ ุฅูู ุฅูุดุงุก ุงูุฌุฏุงูู ุงููุทููุจุฉ');
    console.log('   โน๏ธ ูุฏ ุชุญุชุงุฌ ุฅูู ุชุญุฏูุซ ููุชุงุญ Service Role');
    
  } catch (error) {
    console.error('\n๐ฅ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุงุชุตุงู:', error);
    
    // ุทุจุงุนุฉ ุชูุงุตูู ุงูุฎุทุฃ ููุชุดุฎูุต
    if (error instanceof Error) {
      console.error('ุฑุณุงูุฉ ุงูุฎุทุฃ:', error.message);
      console.error('Stack trace:', error.stack);
    }
    
    process.exit(1);
  }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testDatabaseConnection()
  .then(() => {
    console.log('\nโ ุชู ุฅููุงู ุงูุงุฎุชุจุงุฑ ุจูุฌุงุญ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n๐ฅ ูุดู ูู ุงูุงุฎุชุจุงุฑ:', error);
    process.exit(1);
  });
